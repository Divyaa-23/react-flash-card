{"version":3,"sources":["components/Cardeditor.js","components/Cardviewer.js","App.js","reportWebVitals.js","index.js"],"names":["Cardeditor","props","tempArr","removeCard","event","temp","result","index","target","dataset","splice","setResult","editCard","frontValue","backValue","setFrontValue","setBackValue","className","id","map","item","style","background","color","border","onClick","disabled","onChange","e","value","placeholder","to","Cardviewer","currentCard","useState","count","setCounter","state","setState","length","JSON","stringify","parse","App","localStorage","getItem","useEffect","setItem","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca27b185.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"../App.css\";\nfunction Cardeditor(props) {\n  let tempArr = [];\n\n  //Add new card item\n  const addCard = () => {\n    props.setFrontValue(\"\");\n    props.setBackValue(\"\");\n\n    tempArr = [props.frontValue, props.backValue];\n    props.setResult([...props.result, tempArr]);\n  };\n\n  const removeCard = (event) => {\n    let temp = props.result;\n    let index = event.target.dataset.index;\n    /*  console.log(index); */\n    temp.splice(index, 1);\n    props.setResult([...temp]);\n  };\n\n  const editCard = (event) => {\n    let index = event.target.dataset.index;\n    let temp = [...props.result];\n    tempArr = [props.frontValue, props.backValue];\n    temp.splice(index, 1, tempArr);\n    props.setResult([...temp]);\n    props.setFrontValue(\"\");\n    props.setBackValue(\"\");\n  };\n\n  return (\n    <div className=\"Editor\">\n      <h1>Card Editor</h1>\n      <div id=\"Table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Front</th>\n              <th>Back</th>\n              <th>Delete</th>\n              <th>Edit</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.result.map((item, index) => {\n              return (\n                <tr key={index}>\n                  <td>{item[0]}</td>\n                  <td>{item[1]}</td>\n                  <td>\n                    <button\n                      style={{\n                        background: \"#F4F5F7\",\n                        color: \"black\",\n                        border: \"black 0.5px solid\",\n                      }}\n                      data-index={index}\n                      onClick={removeCard}\n                    >\n                      Delete\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      style={{\n                        background: \"#F4F5F7\",\n                        color: \"black\",\n                        border: \"black 0.5px solid\",\n                      }}\n                      data-index={index}\n                      disabled={!props.frontValue || !props.backValue}\n                      onClick={editCard}\n                    >\n                      Edit\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"InputFields\">\n        <input\n          onChange={(e) => props.setFrontValue(e.target.value)}\n          value={props.frontValue}\n          placeholder=\"Question\"\n        />\n        <input\n          onChange={(e) => props.setBackValue(e.target.value)}\n          value={props.backValue}\n          placeholder=\"Answer\"\n        />\n        <button\n          disabled={!props.frontValue || !props.backValue}\n          style={{\n            background: \"#F4F5F7\",\n            color: \"black\",\n            border: \"1px solid gray\",\n          }}\n          onClick={addCard}\n        >\n          Add Card\n        </button>{\" \"}\n      </div>\n      <div>\n        <NavLink to=\"/Cardviewer\">\n          <button>Card Viewer</button>\n        </NavLink>\n      </div>\n    </div>\n  );\n}\nexport default Cardeditor;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport { useState } from \"react\";\nimport \"../App.css\";\n\nfunction Cardviewer(props) {\n  const [count, setCounter] = useState(0);\n\n  const [state, setState] = useState(true);\n\n  const nextCard = () => {\n    if (count === props.result.length - 1 || !state) {\n      setCounter(0);\n    } else {\n      setCounter(count + 1);\n    }\n  };\n\n  const prevCard = () => {\n    if (count === 0 || !state) {\n      setCounter(props.result.length-1);\n    } else {\n      setCounter(count - 1);\n    }\n  };\n\n  const handleClick = () => {\n    setState(!state);\n  };\n  let currentCard;\n  if (props.result.length > 0) {\n    currentCard = JSON.stringify(\n      state ? props.result[count][0] : props.result[count][1]\n    );\n  }\n  return (\n    <div className=\"Viewer\">\n      <h1>Card Viewer</h1>\n      <div className=\"ViewerBox\" onClick={handleClick}>\n        {/*    <h1>{state ? props.result[count][0] : props.result[count][1]}</h1> */}\n        <h1>{JSON.parse(currentCard)}</h1>\n      </div>\n      <div className=\"NextPrevButtons\">\n        <button onClick={prevCard}>Prev Card</button>\n        <button onClick={nextCard}>Next Card</button>\n      </div>\n      <div>\n        <NavLink to=\"/\">\n          <button>Card Editor</button>\n        </NavLink>\n      </div>\n    </div>\n  );\n}\nexport default Cardviewer;\n","import { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, NavLink, Route, Routes } from \"react-router-dom\";\nimport Cardeditor from \"./components/Cardeditor\";\nimport Cardviewer from \"./components/Cardviewer\";\n\nfunction App() {\n  const [frontValue, setFrontValue] = useState(\"\");\n\n  const [backValue, setBackValue] = useState(\"\");\n\n  //get data from localStorage\n  const getInitialList = () => {\n    const initialValue = localStorage.getItem(\"frontBack\")\n      ? JSON.parse(localStorage.getItem(\"frontBack\"))\n      : [];\n    return initialValue;\n  };\n\n  const [result, setResult] = useState(getInitialList);\n\n  //set input to localStorage\n  useEffect(() => {\n    if (result.length > 0) {\n      localStorage.setItem(\"frontBack\", JSON.stringify(result));\n    }\n  }, [result]);\n\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n\n          <Route\n            index\n            element={\n              <Cardeditor\n                result={result}\n                setResult={setResult}\n                setFrontValue={setFrontValue}\n                setBackValue={setBackValue}\n                frontValue={frontValue}\n                backValue={backValue}\n              />\n            }\n          />\n          <Route path=\"/Cardviewer\" element={<Cardviewer result={result} />} />\n\n          {/* <Route path=\"*\" element={<App/>} /> */}\n        </Routes>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}